Tutorials
=========

This section is all about tutorials. Each tutorial focusses on a lesson to learn with straightforward and minimal code blocks (no detailed API descriptions here).

Getting started
---------------

.. admonition:: First steps with FElupe
   :class: note

   * create a meshed cube with quad elements
   
   * define a numeric region along with a displacement field
   
   * load a Neo-Hookean material formulation
   
   * apply a uniaxial loadcase
   
   * solve the problem
   
   * export the displaced mesh


A quarter model of a solid cube with hyperelastic material behavior is subjected to a uniaxial elongation applied at a clamped end-face. This involves the creation of a mesh, a region and a displacement field. Furthermore, the boundary conditions are created by a template for a uniaxial loadcase. The material behavior is defined through a built-in Neo-Hookean material formulation. Inside a Newton-Rhapson procedure, the internal force vector and the tangent stiffness matrix are generated by assembling both linear and bilinear forms of static equilibrium. Finally, the solution of the incremental displacements is calculated und updated until convergence is reached.

First, let's import FElupe and create a meshed cube out of hexahedron cells with 11 points per axis. A numeric region on the mesh which represents our solid body. A vector-valued displacement field is created on the region.

..  code-block:: python

    import felupe as fe
    
    
    mesh = fe.Cube(n=11)
    region = fe.RegionHexahedron(mesh)
    displacement = fe.Field(region, dim=3)

A uniaxial loadcase is applied on the displacement field. This involves setting up symmetry planes as well as the absolute value of the prescribed displacement at the mesh-points on the right-end face of the cube. The right-end face is clamped: only displacements in direction x are allowed.

..  code-block:: python

    boundaries, dof0, dof1, ext0 = fe.dof.uniaxial(displacement, move=0.2, clamped=True)


..  code-block:: python

    # define the constitutive material behavior
    umat = fe.NeoHooke(mu=1.0, bulk=2.0)

    # newton-rhapson procedure
    res = fe.newtonrhapson(displacement, umat=umat, dof1=dof1, dof0=dof0, ext0=ext0)

    # save result
    fe.save(region, res.x, filename="result.vtk")
